import{_ as a,c as s,o as n,a2 as e}from"./chunks/framework.DOwwFb84.js";const w=JSON.parse('{"title":"Markdown轻指南","description":"","frontmatter":{},"headers":[],"relativePath":"it/Markdown轻指南.md","filePath":"it/Markdown轻指南.md"}'),r={name:"it/Markdown轻指南.md"},l=e('<h1 id="markdown轻指南" tabindex="-1">Markdown轻指南 <a class="header-anchor" href="#markdown轻指南" aria-label="Permalink to &quot;Markdown轻指南&quot;">​</a></h1><h4 id="_2016-09-25" tabindex="-1">2016/09/25 <a class="header-anchor" href="#_2016-09-25" aria-label="Permalink to &quot;2016/09/25&quot;">​</a></h4><p>之前就有接触Markdown,但一直不怎么用，主要是自己不怎么写博客。入职者两个月来，一直在用Markdown写日报，渐渐熟练了，就决定写一篇关于Markdown基本操作的文章。—<em>这玩意真的挺好用的</em></p><h3 id="标题" tabindex="-1">标题 <a class="header-anchor" href="#标题" aria-label="Permalink to &quot;标题&quot;">​</a></h3><p>Markdown提供了六级标题，可以显示六种不同大小的标题，对于定义为标题的文字，在文字前添加#即可。添加的数量不同，标题级别不同。<em>注意空格</em></p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># 一级标题</span></span><br><span class="line"><span class="preprocessor">## 二级标题</span></span><br><span class="line"><span class="preprocessor">### 三级标题</span></span><br><span class="line">......</span><br></pre></td></tr></tbody></table><p>效果如下：</p><h1 id="一级标题" tabindex="-1">一级标题 <a class="header-anchor" href="#一级标题" aria-label="Permalink to &quot;一级标题&quot;">​</a></h1><h2 id="二级标题" tabindex="-1">二级标题 <a class="header-anchor" href="#二级标题" aria-label="Permalink to &quot;二级标题&quot;">​</a></h2><h3 id="三级标题" tabindex="-1">三级标题 <a class="header-anchor" href="#三级标题" aria-label="Permalink to &quot;三级标题&quot;">​</a></h3><hr><h3 id="粗体与斜体" tabindex="-1">粗体与斜体 <a class="header-anchor" href="#粗体与斜体" aria-label="Permalink to &quot;粗体与斜体&quot;">​</a></h3><p>从最早接触的office，到其他编辑器，粗体和斜体都是最常见的功能。所以Markdown肯定是支持的。使用粗体在文本的两端添加两个*，斜体则在文本的两端添加一个*</p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span><span class="keyword">*</span>很粗的<span class="keyword">*</span><span class="keyword">*</span></span><br></pre></td></tr></tbody></table><p><strong>很粗的</strong></p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span>不直的<span class="keyword">*</span></span><br></pre></td></tr></tbody></table><p><em>不直的</em></p><h3 id="列表" tabindex="-1">列表 <a class="header-anchor" href="#列表" aria-label="Permalink to &quot;列表&quot;">​</a></h3><p>列表分为有序列表和无序列表，有序列表以1.、2.、3.之类的数字开头，无序列表则以*或-开头，*注意空格*<br> 有序列表：</p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>1</span><br><span class="line"><span class="bullet">2. </span>2</span><br><span class="line"><span class="bullet">3. </span>3</span><br></pre></td></tr></tbody></table><ol><li>一</li><li>二</li><li>三</li></ol><p>无序列表：</p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>1</span><br><span class="line"><span class="bullet">* </span>2</span><br><span class="line"><span class="bullet">* </span>3</span><br></pre></td></tr></tbody></table><ul><li><p>1</p></li><li><p>2</p></li><li><p>3</p><h3 id="引用" tabindex="-1">引用 <a class="header-anchor" href="#引用" aria-label="Permalink to &quot;引用&quot;">​</a></h3><p>如果我们需要借用他们的句子，便可以使用引用这个格式，引用的格式为，在引用的文本前加入&gt;符号。<em>注意空格</em></p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="blockquote">&gt; 这是引用效果</span></span><br></pre></td></tr></tbody></table></li></ul><blockquote><p>这是引用效果</p></blockquote><h3 id="图片与链接" tabindex="-1">图片与链接 <a class="header-anchor" href="#图片与链接" aria-label="Permalink to &quot;图片与链接&quot;">​</a></h3><p>Markdown是支持插入图片和链接的，这样就大大的增强了内容的丰富性，也提升的用户的体验效果。Markdown中插入图片和链接都是采用URL地址的方式。因此，要想添加本地图片，比较复杂。<br> 插入图片:</p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="link_label">image</span>](<span class="link_url">http://7xjjaw.com1.z0.glb.clouddn.com/hexo/Summaryword-cloud-coding-vector-1695410.jpg</span>)</span><br></pre></td></tr></tbody></table><p>()的内容就是图片的地址链接。目前[]中的文字似乎不添加也是可以的<br><img src="http://7xjjaw.com1.z0.glb.clouddn.com/hexo/Summaryword-cloud-coding-vector-1695410.jpg" alt="image"><br> 链接：</p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="link_label">豆瓣</span>](<span class="link_url">http://www.douban.com/</span>)</span><br></pre></td></tr></tbody></table><p><a href="http://www.douban.com/" target="_blank" rel="noreferrer">豆瓣</a>。是不是和插入图片的方法很像，[]中的文字就是链接的显示名称，可自己定义，()中就是链接的实际地址。<br> 自动链接：<br> Markdown还有一种自动链接的方式，使用&lt;&gt;包含住URL地址即可。<br> 代码格式：</p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="string">http:</span><span class="comment">//www.douban.com/&gt;</span></span><br></pre></td></tr></tbody></table><p>显示效果:<br><a href="http://www.douban.com/" target="_blank" rel="noreferrer">http://www.douban.com/</a></p><h3 id="代码框" tabindex="-1">代码框 <a class="header-anchor" href="#代码框" aria-label="Permalink to &quot;代码框&quot;">​</a></h3><p>文中的代码都是以代码框的方式显示。代码框就是使用两行的</p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">```\n我是代码框，框内可使用TAB键缩进的。http://www.douban.com/</span><br></pre></td></tr></tbody></table><div class="language-auto vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">auto</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>也可以将文字缩进4个空格，就会显示为代码框的形式</span></span></code></pre></div><h3 id="表格" tabindex="-1">表格 <a class="header-anchor" href="#表格" aria-label="Permalink to &quot;表格&quot;">​</a></h3><p>表格的内容较多，而且不同编辑器似乎不太一样，但基本一致，如不成功可上网查询。</p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">header <span class="number">1</span> <span class="string">| header 2</span></span><br><span class="line">--- <span class="string">| ---</span></span><br><span class="line">row <span class="number">1</span> col <span class="number">1</span> <span class="string">| row 1 col 2</span></span><br><span class="line">row <span class="number">2</span> col <span class="number">1</span> <span class="string">| row 2 col 2</span></span><br></pre></td></tr></tbody></table><p>效果如下：<br> header 1 | header 2<br> —-|—-<br> row 1 col 1 | row 1 col 2<br> row 2 col 1 | row 2 col 2</p><h3 id="分割线" tabindex="-1">分割线 <a class="header-anchor" href="#分割线" aria-label="Permalink to &quot;分割线&quot;">​</a></h3><p>有时可能会用到，分割的形式就是单独一行输入三个*或三个-</p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---</span></span><br></pre></td></tr></tbody></table><hr><p>上面有条线</p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br></pre></td></tr></tbody></table><hr><p>上面有条线</p><h3 id="删除线" tabindex="-1">删除线 <a class="header-anchor" href="#删除线" aria-label="Permalink to &quot;删除线&quot;">​</a></h3><p>通过在文本前后添加 ~~ 表示删除线。<br> 这个一件已经完成的事情</p><h3 id="换行和分段" tabindex="-1">换行和分段 <a class="header-anchor" href="#换行和分段" aria-label="Permalink to &quot;换行和分段&quot;">​</a></h3><p>刚使用时，肯定会遇到这个问题。Markdown中使用两个空格键+一个回车键进行换行，连续两个回车，即可形成分段，是不是很简单。这里就不做演示了。</p><h3 id="特殊符号显示" tabindex="-1">特殊符号显示 <a class="header-anchor" href="#特殊符号显示" aria-label="Permalink to &quot;特殊符号显示&quot;">​</a></h3><p>看到这，你会发现很多符号都有自己的含义。但如果有时只想显示这个符号时，怎么办呢。Markdown使用的是\\来帮助你。<br> 代码格式：</p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">\\`</span></span><br></pre></td></tr></tbody></table><p>显示效果<br> `<br> Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号</p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">\\</span>   反斜线</span><br><span class="line">`   反引号</span><br><span class="line"><span class="string">\\*</span>   星号</span><br><span class="line">_   底线</span><br><span class="line">{}  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  括弧</span><br><span class="line"><span class="string">\\#</span>   井字号</span><br><span class="line"><span class="string">\\+</span>   加号</span><br><span class="line"><span class="string">\\-</span>   减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   惊叹号</span><br></pre></td></tr></tbody></table><h4 id="相关文章链接" tabindex="-1">相关文章链接 <a class="header-anchor" href="#相关文章链接" aria-label="Permalink to &quot;相关文章链接&quot;">​</a></h4><ul><li><a href="http://www.jianshu.com/p/1e402922ee32/" target="_blank" rel="noreferrer">Markdown——入门指南</a></li><li><a href="http://www.jianshu.com/p/q81RER#" target="_blank" rel="noreferrer">献给写作者的 Markdown 新手指南</a></li><li><a href="http://wowubuntu.com/markdown/#autolink" target="_blank" rel="noreferrer">Markdown 语法说明 (简体中文版)</a></li></ul>',60),p=[l];function t(c,o,d,b,i,h){return n(),s("div",null,p)}const k=a(r,[["render",t]]);export{w as __pageData,k as default};
